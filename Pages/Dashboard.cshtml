@page
@model DashboardModel
@{
    ViewData["Title"] = "Adventure Log";
}

<div class="container py-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h2 class="mb-0">
                        <span class="zelda-icon sheikah"></span>
                        Cathy's Adventure Log
                    </h2>
                    <a asp-page="/Index" class="btn btn-sheikah btn-sm">Return to Quest</a>
                </div>
                <div class="card-body">
                    @if (Model.IsLoading)
                    {
                        <div class="text-center py-4">
                            <div class="sheikah-pulse" style="width: 50px; height: 50px; border-radius: 50%; background-color: var(--primary-color); margin: 0 auto;"></div>
                            <p class="mt-3">Communicating with the Sheikah Slate...</p>
                        </div>
                    }
                    else if (!Model.IsSupabaseConfigured)
                    {
                        <div class="quest-item">
                            <h4 class="alert-heading">Sheikah Network Unavailable</h4>
                            <p>The ancient technology isn't responding. Please reconfigure the connection to view adventure data.</p>
                        </div>
                    }
                    else if (Model.FeedbackList.Count == 0)
                    {
                        <div class="quest-item">
                            <h4 class="alert-heading">No Adventures Recorded</h4>
                            <p>Cathy has not received any guidance from fellow adventurers yet. Once mentors provide feedback, it will appear here.</p>
                        </div>
                    }
                    else
                    {
                        <!-- Summary Stats Section -->
                        <div class="form-section">
                            <h3 class="mb-3">Hero's Journey Statistics</h3>
                            <div class="form-row">
                                <div class="form-group form-group-md">
                                    <div class="card dashboard-card sheikah-border h-100">
                                        <div class="card-body text-center">
                                            <h5 class="card-title">Total Guidance Received</h5>
                                            <p class="display-4">@Model.FeedbackList.Count</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group form-group-md">
                                    <div class="card dashboard-card sheikah-border h-100">
                                        <div class="card-body text-center">
                                            <h5 class="card-title">Most Common Mentor Type</h5>
                                            <p class="display-5">@Model.MostCommonRole</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group form-group-md">
                                    <div class="card dashboard-card sheikah-border h-100">
                                        <div class="card-body text-center">
                                            <h5 class="card-title">Greatest Skill</h5>
                                            <p class="display-5">@Model.MostCommonStrength</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Charts Section -->
                        <div class="form-section">
                            <h3 class="mb-3">Adventure Performance</h3>
                            <div class="form-row">
                                <div class="form-group form-group-lg">
                                    <div class="card shadow sheikah-border h-100">
                                        <div class="card-header">
                                            <h5 class="mb-0">Strength Map</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="strengthsRadarChart"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group form-group-lg">
                                    <div class="card shadow sheikah-border h-100">
                                        <div class="card-header">
                                            <h5 class="mb-0">Skills to Master</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="improvementsBubbleChart"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Suggestions Overview -->
                        <div class="form-section">
                            <h3 class="mb-3">Recommended Side Quests</h3>
                            <div class="card shadow sheikah-border">
                                <div class="card-header">
                                    <h5 class="mb-0">Future Adventures</h5>
                                </div>
                                <div class="card-body">
                                    <div class="form-row">
                                        @foreach (var suggestion in Model.SuggestionsCounts)
                                        {
                                            <div class="form-group form-group-sm">
                                                <div class="card h-100 border-0">
                                                    <div class="card-body">
                                                        <h6 class="card-title">@suggestion.Key</h6>
                                                        <div class="d-flex align-items-end mt-2">
                                                            <div class="progress flex-grow-1" style="height: 8px; background-color: rgba(89, 193, 189, 0.2);">
                                                                <div class="progress-bar" role="progressbar" 
                                                                     style="width: @(suggestion.Value * 100 / Math.Max(1, Model.FeedbackList.Count))%; background-color: var(--primary-color);" 
                                                                     aria-valuenow="@suggestion.Value" 
                                                                     aria-valuemin="0" 
                                                                     aria-valuemax="@Model.FeedbackList.Count"></div>
                                                            </div>
                                                            <span class="ms-2 small">@suggestion.Value</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Feedback Listing -->
                        <div class="form-section">
                            <h3 class="mb-3">Adventure Journal</h3>
                            <div class="card shadow sheikah-border">
                                <div class="card-header">
                                    <h5 class="mb-0">Detailed Guidance</h5>
                                </div>
                                <div class="card-body p-0">
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0">
                                            <thead>
                                                <tr>
                                                    <th>Date</th>
                                                    <th>Mentor</th>
                                                    <th>Strengths</th>
                                                    <th>Skills to Master</th>
                                                    <th>Recommended Quests</th>
                                                    <th>Wisdom Shared</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var feedback in Model.FeedbackList.OrderByDescending(f => f.CreatedAt))
                                                {
                                                    <tr>
                                                        <td>@feedback.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                                        <td>@feedback.FeedbackProviderRole</td>
                                                        <td>
                                                            <ul class="list-unstyled mb-0">
                                                                @foreach (var strength in feedback.Strengths)
                                                                {
                                                                    <li><span class="badge bg-success">@strength</span></li>
                                                                }
                                                            </ul>
                                                        </td>
                                                        <td>
                                                            <ul class="list-unstyled mb-0">
                                                                @foreach (var improvement in feedback.Improvements)
                                                                {
                                                                    <li><span class="badge bg-warning text-dark">@improvement</span></li>
                                                                }
                                                            </ul>
                                                        </td>
                                                        <td>
                                                            <ul class="list-unstyled mb-0">
                                                                @foreach (var suggestion in feedback.HirableSuggestions)
                                                                {
                                                                    <li><span class="badge bg-info">@suggestion</span></li>
                                                                }
                                                            </ul>
                                                        </td>
                                                        <td>
                                                            @if (string.IsNullOrEmpty(feedback.Comments))
                                                            {
                                                                <span class="text-muted"><em>No comments</em></span>
                                                            }
                                                            else
                                                            {
                                                                <span>@feedback.Comments</span>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
    <script>
        // Initialize charts when DOM is fully loaded
        function initCharts() {
            console.log('Initializing all visualizations...');
            
            createStrengthsRadarChart();
            createImprovementsBubbleChart();
        }
        
        // Create Radar Chart for Strengths
        function createStrengthsRadarChart() {
            const container = document.getElementById('strengthsRadarChart');
            if (!container) return;
            
            // Clear the container
            container.innerHTML = '';
            
            // Get the data for the radar chart
            const strengthsData = @Html.Raw(Model.StrengthsChartData);
            
            if (!strengthsData || !strengthsData.labels || strengthsData.labels.length === 0) {
                container.innerHTML = '<div class="alert alert-info">Not enough data to display strengths chart</div>';
                return;
            }
            
            // Transform data for radar chart
            const labels = strengthsData.labels;
            const data = strengthsData.datasets[0].data;
            
            // Calculate dimensions
            const width = container.offsetWidth;
            const height = 300;
            const radius = Math.min(width, height) / 2 * 0.8;
            const centerX = width / 2;
            const centerY = height / 2;
            
            // Create SVG element
            const svg = d3.select("#strengthsRadarChart")
                .append("svg")
                .attr("width", width)
                .attr("height", height);
            
            // Add a group for the radar chart centered in the SVG
            const chart = svg.append("g")
                .attr("transform", `translate(${centerX}, ${centerY})`);
                
            // Scale for the radius
            const maxValue = d3.max(data) * 1.1; // Add 10% padding
            const rScale = d3.scaleLinear()
                .domain([0, maxValue])
                .range([0, radius]);
            
            // Number of axes
            const numAxes = labels.length;
            const angleSlice = Math.PI * 2 / numAxes;
            
            // Draw the circular grid
            const levels = 5;
            const levelFactor = radius / levels;
            
            // Draw background grid circles
            for (let level = 1; level <= levels; level++) {
                const r = levelFactor * level;
                chart.append("circle")
                    .attr("cx", 0)
                    .attr("cy", 0)
                    .attr("r", r)
                    .attr("class", "grid-circle")
                    .style("fill", "none")
                    .style("stroke", "#e0e0e0")
                    .style("stroke-dasharray", "4,4");
                
                // Add level values if needed
                if (level < levels) {
                    chart.append("text")
                        .attr("x", 5)
                        .attr("y", -r)
                        .attr("dy", "0.4em")
                        .style("font-family", "Georgia")
                        .style("font-size", "10px")
                        .style("fill", "#5f6368")
                        .text(Math.round(maxValue * level / levels));
                }
            }
            
            // Draw the axes
            const axes = chart.selectAll(".axis")
                .data(labels)
                .enter()
                .append("g")
                .attr("class", "axis");
            
            // Draw axis lines
            axes.append("line")
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", (d, i) => radius * Math.cos(angleSlice * i - Math.PI / 2))
                .attr("y2", (d, i) => radius * Math.sin(angleSlice * i - Math.PI / 2))
                .style("stroke", "#e0e0e0")
                .style("stroke-width", "1px");
            
            // Add axis labels
            axes.append("text")
                .attr("class", "axis-label")
                .attr("text-anchor", "middle")
                .attr("dy", "0.35em")
                .attr("x", (d, i) => (radius + 20) * Math.cos(angleSlice * i - Math.PI / 2))
                .attr("y", (d, i) => (radius + 20) * Math.sin(angleSlice * i - Math.PI / 2))
                .style("font-family", "Georgia")
                .style("font-size", "14px")
                .style("font-weight", "bold")
                .style("fill", d => getStrengthColor(labels.indexOf(d)))
                .text(d => d);
                
            // Convert data to coordinates
            const pathData = [];
            
            for (let i = 0; i < numAxes; i++) {
                const dataValue = data[i];
                const pointRadius = rScale(dataValue);
                pathData.push({
                    x: pointRadius * Math.cos(angleSlice * i - Math.PI / 2),
                    y: pointRadius * Math.sin(angleSlice * i - Math.PI / 2),
                    value: dataValue,
                    label: labels[i]
                });
            }
            
            // Create line function to draw the radar shape
            const radarLine = d3.line()
                .x(d => d.x)
                .y(d => d.y)
                .curve(d3.curveLinearClosed);
            
            // Draw the radar path
            chart.append("path")
                .datum(pathData)
                .attr("class", "radar-path")
                .attr("d", radarLine)
                .style("fill", "rgba(66, 133, 244, 0.3)")
                .style("stroke", "#4285f4")
                .style("stroke-width", "3px");
                
            // Add data points
            chart.selectAll(".radar-point")
                .data(pathData)
                .enter()
                .append("circle")
                .attr("class", "radar-point")
                .attr("cx", d => d.x)
                .attr("cy", d => d.y)
                .attr("r", 6)
                .style("fill", (d, i) => getStrengthColor(i))
                .style("stroke", "#fff")
                .style("stroke-width", "2px")
                .append("title")
                .text(d => `${d.label}: ${d.value}`);
            
            // Add data values
            chart.selectAll(".radar-value")
                .data(pathData)
                .enter()
                .append("text")
                .attr("class", "radar-value")
                .attr("x", d => d.x * 1.1)
                .attr("y", d => d.y * 1.1)
                .attr("text-anchor", "middle")
                .attr("dy", "0.35em")
                .style("font-family", "Georgia")
                .style("font-size", "12px")
                .style("font-weight", "bold")
                .style("fill", "#333")
                .text(d => d.value);
        }
        
        // Create Bubble Chart for Improvements
        function createImprovementsBubbleChart() {
            const container = document.getElementById('improvementsBubbleChart');
            if (!container) return;
            
            // Clear the container
            container.innerHTML = '';
            
            // Get the data for the chart
            const improvementsData = @Html.Raw(Model.ImprovementsChartData);
            
            if (!improvementsData || !improvementsData.labels || improvementsData.labels.length === 0) {
                container.innerHTML = '<div class="alert alert-info">Not enough data to display improvements chart</div>';
                return;
            }
            
            // Transform data into format for horizontal bar chart
            const chartData = [];
            improvementsData.labels.forEach((label, index) => {
                chartData.push({
                    label: label,
                    value: improvementsData.datasets[0].data[index],
                    color: getImprovementColor(index)
                });
            });
            
            // Sort data by value (descending)
            chartData.sort((a, b) => b.value - a.value);
            
            // Calculate the appropriate left margin based on the longest text
            const longestLabelLength = chartData.reduce((max, item) => 
                Math.max(max, item.label.length), 0);
            
            // Set up dimensions
            const width = container.offsetWidth;
            const height = 300;
            // Calculate left margin based on text length (minimum 150px)
            const leftMargin = Math.max(150, longestLabelLength * 9);
            const margin = {top: 20, right: 40, bottom: 30, left: leftMargin};
            const chartWidth = width - margin.left - margin.right;
            const chartHeight = height - margin.top - margin.bottom;
            
            // Create SVG element
            const svg = d3.select("#improvementsBubbleChart")
                .append("svg")
                .attr("width", width)
                .attr("height", height)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);
            
            // Create scales
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(chartData, d => d.value) * 1.1]) // Add 10% padding
                .range([0, chartWidth]);
                
            const yScale = d3.scaleBand()
                .domain(chartData.map(d => d.label))
                .range([0, chartHeight])
                .padding(0.3);
            
            // Add axes
            svg.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(0,${chartHeight})`)
                .call(d3.axisBottom(xScale)
                    .ticks(Math.min(5, d3.max(chartData, d => d.value)))
                    .tickSize(0)
                )
                .call(g => g.select(".domain").remove()) // Remove axis line
                .selectAll("text")
                .style("font-family", "Georgia")
                .style("font-size", "12px")
                .style("fill", "#5f6368");
            
            // Add y-axis with improved text positioning
            const yAxis = svg.append("g")
                .attr("class", "y-axis")
                .call(d3.axisLeft(yScale)
                    .tickSize(0)
                )
                .call(g => g.select(".domain").remove()); // Remove axis line
                
            // Manually position and style the y-axis text for better control
            yAxis.selectAll("text").remove(); // Remove auto-generated text
            
            // Add custom text labels
            yAxis.selectAll(".y-axis-label")
                .data(chartData)
                .enter()
                .append("text")
                .attr("class", "y-axis-label")
                .attr("x", -15) // Position to the left of the bars
                .attr("y", d => yScale(d.label) + yScale.bandwidth() / 2)
                .attr("text-anchor", "end") // Right-align text
                .attr("dominant-baseline", "middle") // Vertically center
                .style("font-family", "Georgia")
                .style("font-size", "14px")
                .style("font-weight", "bold")
                .style("fill", "#202124")
                .text(d => d.label);
            
            // Add bars
            const bars = svg.selectAll(".bar")
                .data(chartData)
                .enter()
                .append("g");
                
            bars.append("rect")
                .attr("class", "bar")
                .attr("y", d => yScale(d.label))
                .attr("height", yScale.bandwidth())
                .attr("x", 0)
                .attr("width", 0) // Start at 0 for animation
                .attr("fill", d => d.color)
                .attr("rx", 6) // Rounded corners
                .attr("ry", 6);
                
            // Add animation
            bars.selectAll("rect")
                .transition()
                .duration(800)
                .attr("width", d => xScale(d.value));
            
            // Add value labels
            bars.append("text")
                .attr("x", d => xScale(d.value) - 10)
                .attr("y", d => yScale(d.label) + yScale.bandwidth() / 2)
                .attr("dy", ".35em")
                .style("font-family", "Georgia")
                .style("font-size", "16px")
                .style("font-weight", "bold")
                .style("fill", "white")
                .style("text-anchor", "end")
                .style("pointer-events", "none")
                .style("text-shadow", "0px 1px 2px rgba(0,0,0,0.3)")
                .text(d => d.value)
                .attr("opacity", 0) // Start transparent for animation
                .transition()
                .duration(1200)
                .attr("opacity", 1); // Fade in
        }
        
        // Color generator function for strengths
        function getStrengthColor(index) {
            const colors = [
                "#34a853", // Google Green
                "#4285f4", // Google Blue
                "#5e35b1", // Deep Purple
                "#00acc1", // Cyan
                "#43a047", // Green
                "#039be5"  // Light Blue
            ];
            return colors[index % colors.length];
        }
        
        // Color generator function for improvements
        function getImprovementColor(index) {
            const colors = [
                "#ea4335", // Google Red
                "#fbbc05", // Google Yellow
                "#ff7043", // Deep Orange
                "#ec407a", // Pink
                "#ab47bc", // Purple
                "#ef5350"  // Red
            ];
            return colors[index % colors.length];
        }

        // Run initialization on page load
        document.addEventListener('DOMContentLoaded', initCharts);
        
        // Handle window resize to make charts responsive
        window.addEventListener('resize', function() {
            console.log('Window resized, redrawing charts...');
            initCharts();
        });
        
        // Also run initialization when navigating back to this page 
        window.addEventListener('pageshow', function(event) {
            // If the page is loaded from cache (browser back/forward), re-initialize
            if (event.persisted) {
                console.log('Page was loaded from cache, reinitializing charts...');
                initCharts();
            }
        });
    </script>
}